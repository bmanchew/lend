Based on the DigiFi project and its setup requirements, the recommended primary database is **MongoDB**. Here’s why and what you should consider:

### Why MongoDB?

- **DigiFi’s Configuration:**  
  The DigiFi Loan Origination System expects a properly configured MongoDB environment. In the GitHub issue discussing local installation (Issue #86), users noted that the configuration file must include details for MongoDB (as well as Redis and S3) and that for local development, it’s best to run MongoDB as a replica set rather than a standalone instance. This setup is important for ensuring high availability and proper replication of your data.  
  

- **Flexibility for Loan Data:**  
  Loan origination systems often deal with varied and evolving data structures—applicant details, document metadata, underwriting criteria, and more. MongoDB, as a document database, provides the schema flexibility you need to store this diverse data efficiently without being forced into rigid table structures.

- **Scalability:**  
  MongoDB is well-known for its horizontal scalability, which can be beneficial if your system needs to handle large volumes of loan applications and related operations as your business grows.

### Additional Considerations

- **Redis for Caching and Sessions:**  
  DigiFi also uses Redis for caching purposes and session management. While Redis isn’t a primary database, it complements MongoDB by improving performance for frequently accessed data.

- **S3 for File Storage:**  
  If your system will handle document uploads or other file storage requirements, integrating with a service like Amazon S3 is advisable. DigiFi’s configuration mentions S3 as one of the required elements.

### Alternative Options

If you come from a SQL background and are more comfortable with relational databases, you might consider PostgreSQL for its robustness and strong support for complex queries. However, if you want to align with the architecture and dependencies that DigiFi uses, MongoDB is the natural choice.

### Final Recommendation

For building a loan origination system from scratch using DigiFi’s modular approach:
- **Primary Database:** MongoDB (configured as a replica set for production)
- **Supporting Components:** Redis for caching/session management and S3 (or a similar service) for file storage

This setup ensures that you have a scalable, flexible, and robust foundation that aligns with DigiFi’s architecture. If you plan to incorporate or adapt DigiFi’s code and dependencies, following their database recommendations will simplify integration and help you avoid common setup issues.

Would you like additional guidance on setting up MongoDB as a replica set or configuring the other dependencies?