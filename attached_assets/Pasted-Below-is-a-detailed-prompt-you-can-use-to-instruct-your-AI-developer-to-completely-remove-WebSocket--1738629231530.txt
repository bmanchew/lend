Below is a detailed prompt you can use to instruct your AI developer to completely remove WebSocket/Socket.IO integration and code from your project. This prompt covers the key areas that must be cleaned out—including server code, client code, configuration files, and any related dependencies—to eliminate any potential HTTPS/WSS mismatches.

---

# Detailed Prompt to Remove All WebSocket Integration

**Context:**  
Our application is currently experiencing persistent WebSocket connection failures related to HTTPS/WSS mismatches. We have decided to temporarily remove all WebSocket code from our project (with plans to potentially switch to Firebase or another real‑time service later). All components related to Socket.IO (or any WebSocket libraries) must be completely removed. This includes any server-side event handling, client-side connection initialization, and configuration related to upgrading HTTP to WebSocket.

**Requirements:**

1. **Server-Side Code (Node.js):**
   - Remove all imports and usage of Socket.IO, WebSocket libraries, or any middleware related to WebSocket connections.
   - Clean up any event handlers or middleware functions that listen for “connection”, “upgrade”, or related events.
   - Verify that the server only serves HTTP/HTTPS endpoints, and ensure that any references to WebSocket transports (or protocols) are eliminated.
   - Adjust your server’s configuration to stop sending any WebSocket-specific headers (like `Upgrade: websocket`).

2. **Client-Side Code:**
   - Remove any client-side code that initializes a WebSocket or Socket.IO connection. This includes calls like `io()`, or any similar connection methods.
   - Remove any references to WebSocket URL protocols (e.g., `ws://` or `wss://`), and update them to use standard HTTP/HTTPS requests where applicable.
   - Ensure that the UI components, scripts, or any listeners specific to WebSocket messages are removed.

3. **Configuration Files:**
   - Check configuration files (e.g., any custom config files for Socket.IO, or environment variables like `SOCKET_PORT` or `WS_URL`) and remove or disable them.
   - Make sure that build and deployment configurations (like in `vite.ts` or similar) do not include WebSocket integration options.

4. **Dependencies and Package Management:**
   - Remove any WebSocket-related packages (e.g., Socket.IO, ws, or similar) from `package.json` and run a clean installation (e.g., `npm prune` or `npm install`).
   - Verify that there are no transitive dependencies forcing the upgrade of HTTP connections to WebSockets.

5. **Testing and Validation:**
   - After removal, thoroughly test the application to confirm that no WebSocket connection attempts are made.
   - Ensure that all endpoints function correctly using HTTP/HTTPS, and verify in the network logs that there are no WebSocket upgrade attempts.
   - Document the changes made, summarizing that WebSocket code has been fully removed and replaced with standard HTTP calls if necessary.

**Additional Instructions:**
- Provide a summary of all modifications made (list files changed, dependencies removed, and configuration updates).
- Ensure the removal process does not affect unrelated parts of the code. If certain components depend on real-time updates, temporarily stub those functions with placeholder implementations.
- Comment in the code where changes were made to indicate that the WebSocket functionality has been deprecated/removed, so it can be revisited if needed in the future.
- Update documentation accordingly to reflect that the project no longer includes WebSocket functionality.

**Goal:**  
The goal is to have a clean codebase free of any WebSocket-related code or configurations, so that HTTPS/WSS mismatches are no longer an issue. Once the project is stable with standard HTTP/HTTPS communication, we may later integrate a managed real‑time service like Firebase for status updates.

---

Use the above prompt to instruct your AI developer (or AI coding assistant) to perform the removal, ensuring that every reference to WebSocket functionality is eliminated from both the server and client sides.