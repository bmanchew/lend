Below is an analysis and documentation outlining why the 401 error ("Missing credentials") is occurring and what changes are needed to resolve it.

---

# Authentication Issue Analysis - ShiFi Login Flow

## Overview

Your system is experiencing 401 Unauthorized errors during login. According to the logs and code, the OTP is sent correctly, but when the login attempt is made, the server complains about missing credentials. The main issue lies in the mismatch between the fields sent by the client and those expected by the server’s Passport strategy.

---

## Detailed Analysis

### 1. Field Mapping Mismatch

- **Client-side Form Submission:**
  - The form currently sends three fields: `phoneNumber`, `code`, and `loginType`.
  - The `handleSendOTP` function correctly formats the phone number and sets it as `username` in the form.
  - However, when the form is submitted, the OTP (stored in `code`) is not mapped to the `password` field, which is expected by the Passport LocalStrategy.

- **Server-side Passport Strategy:**
  - The LocalStrategy is configured to use:
    - `usernameField: 'username'`
    - `passwordField: 'password'`
  - In the strategy’s callback, the authentication fails if either `username` or `password` is missing:
    ```typescript
    if (!username || !password) {
      return done(null, false, { message: "Missing credentials" });
    }
    ```
  - Since the client never maps `code` to `password`, the `password` field remains empty, triggering this check.

### 2. OTP Verification

- The server expects:
  - **Username:** Formatted phone number (with a `+1` prefix).
  - **Password:** The OTP code.
- In your current setup, the server logs indicate that the stored OTP (`user.lastOtpCode`) is compared to the incoming `password` value. Because `password` is never properly set, the OTP check is bypassed and results in an authentication failure.

---

## Suggested Fixes

### Client-Side Adjustments

Ensure that the form submission properly maps the fields as expected by the server. For instance, update the submission handler to transform the input data into the format the server expects:

```typescript
const handleSubmit = (data) => {
  loginMutation.mutate({
    username: data.phoneNumber, // Already formatted as needed
    password: data.code,        // Map the OTP code to the 'password' field
    loginType: 'customer'
  });
};
```

### Server-Side Adjustments

Although the main issue is on the client side, review your Passport strategy for clarity:

```typescript
passport.use(new LocalStrategy({
  usernameField: 'username',
  passwordField: 'password',
  passReqToCallback: true
}, async (req, username, password, done) => {
  const loginType = req.body.loginType || 'customer';
  
  if (!username || !password) {
    console.log('Missing credentials:', { username, password });
    return done(null, false, { message: "Missing credentials" });
  }

  // For customers, use phone & OTP
  if (loginType === 'customer') {
    // Ensure phone is formatted correctly
    const fullPhone = username.startsWith('+1') ? username : `+1${username.replace(/\D/g, '')}`;
    
    // Fetch the user based on phone number
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.phoneNumber, fullPhone));
    
    if (!user) {
      console.log('No user found for phone:', fullPhone);
      return done(null, false, { message: "User not found" });
    }
    
    console.log('Found user:', { 
      id: user.id,
      phone: user.phoneNumber,
      storedOtp: user.lastOtpCode
    });
    
    // Compare stored OTP with the provided OTP (password)
    if (user.lastOtpCode !== password) {
      console.log('OTP mismatch:', {
        provided: password,
        stored: user.lastOtpCode
      });
      return done(null, false, { message: "Invalid code" });
    }
    
    // Successful authentication
    return done(null, user);
  }

  // Add handling for other login types if necessary...
}));
```

### Testing Steps

1. **Send OTP:**
   - Use the client to send an OTP to the phone number.
   - Verify that the OTP is stored in your database and that logs show the OTP has been sent.

2. **Submit Login Form:**
   - Ensure the client now submits:
     - `username`: phone number (formatted with `+1`).
     - `password`: OTP code (mapped from the `code` field).
     - `loginType`: `'customer'`.
     
3. **Monitor Logs:**
   - Check the server logs to ensure that both `username` and `password` are present.
   - Confirm that the OTP validation is correctly comparing the provided OTP against the stored OTP.

---

## Conclusion

The 401 error ("Missing credentials") is primarily due to the client-side failure to map the OTP (`code`) to the `password` field expected by your Passport LocalStrategy. By updating the form submission to properly pass both `username` (phone number) and `password` (OTP code), and ensuring that the server validation logic checks the OTP correctly, the authentication flow should proceed without the missing credentials error.

This document should help you pinpoint and fix the issue to enable a successful OTP login flow.